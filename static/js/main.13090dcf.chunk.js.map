{"version":3,"sources":["Deck.js","DeckDrawer.js","App.js","serviceWorker.js","index.js"],"names":["pregeneratedCardArray","map","suit","y","rank","x","flat","Deck","_this","this","Object","classCallCheck","shuffle","times","arguments","length","undefined","i","cards","sort","a","b","Math","random","dealOneCard","shift","toConsumableArray","getNewDeck","getCardImagePosition","_ref","concat","DeckDrawer","possibleConstructorReturn","getPrototypeOf","call","dealtCard","deck","dealtCards","produce","state","draftDrawnCards","push","setState","cardsRemaining","render","react_default","createElement","className","onClick","src","alt","card","style","objectPosition","key","React","Component","App","DeckDrawer_DeckDrawer","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13090dcf.chunk.js","sourcesContent":["export const generateCardArray = () =>\n  ['spaces', 'hearts', 'diamonds', 'clubs'].map((suit, y) =>\n    ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'].map((rank, x) =>\n      // Note:  the x, y couples this data to the card image.\n      //        This is easier, but more restricting on graphics.\n      ({ suit, rank, x, y })\n    )\n  ).flat();\n\nexport const pregeneratedCardArray = generateCardArray();\n\nexport default class Deck {\n  constructor() {\n    this.cards = [...pregeneratedCardArray];\n  }\n\n  shuffle = (times = 1) => {\n    for(let i=0; i<times; ++i) {\n      this.cards.sort((a, b) => Math.random() < 0.5 ? 1 : -1);\n    }\n  }\n\n  dealOneCard = () => {\n    return this.cards.shift();\n  }\n\n  length = () => {\n    return this.cards.length\n  }\n}\n\nexport const getNewDeck = () => new Deck();\n","import React from 'react';\nimport produce from 'immer';\n\nimport { getNewDeck } from './Deck';\nimport './DeckDrawer.scss';\n\n// TODO:  don't use a sprite sheet for html img tags =x\n//        Should either use individual images, or this should be made with canvas.\n//        The card width and height are 90 x 135 and it's also in DeckDrawer.scss\nconst getCardImagePosition = ({ x, y }) =>\n  `${-8 + x * -98}px ${-8 + y * -143}px`;\n\nexport default class DeckDrawer extends React.Component {\n  constructor() {\n    super();\n\n    this.deck = getNewDeck();\n\n    this.state = {\n      cardsRemaining: this.deck.length(),\n      dealtCards: [],\n    }\n  }\n\n  dealOneCard = () => {\n    const dealtCard = this.deck.dealOneCard();\n    if (!dealtCard) return;\n\n    // create a new array of drawn cards with the new card pushed.\n    const dealtCards = produce(this.state.dealtCards, draftDrawnCards => {\n      draftDrawnCards.push(dealtCard);\n    });\n\n    this.setState({\n      dealtCards,\n      cardsRemaining: this.deck.length()\n    });\n  };\n\n  render = () =>\n    <div className=\"DeckDrawer\">\n      <p>Cards left: { this.state.cardsRemaining }</p>\n      <div>\n        <button onClick={ () => this.deck.shuffle() }>Shuffle</button>\n        <button onClick={ this.dealOneCard }>Draw</button>\n      </div>\n      <img src=\"./cardback.png\" alt=\"card back\" onClick={ this.dealOneCard } />\n      <div>\n        { this.state.dealtCards.map(card =>\n          <img\n            src=\"./cardfronts.sheet.png\"\n            alt={ `${card.rank} of ${card.suit}` }\n            className=\"faceCard\"\n            style={{ objectPosition: getCardImagePosition(card) }}\n            key={ card.rank + card.suit }\n          />\n        )}\n      </div>\n    </div>\n}\n","import React from 'react';\n\nimport DeckDrawer from './DeckDrawer';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className='App-header'>\n          <h1>Card Dealer</h1>\n          <h2>This app shuffles and draws cards from a deck.</h2>\n          <p>The cards start ordered.</p>\n          <p>Hit the 'shuffle' button to randomize the cards.</p>\n          <p>Click either the 'draw' button, or the top of the deck to draw a card</p>\n        </header>\n        <DeckDrawer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}